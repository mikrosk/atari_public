SCSI2Pi Client Tools
--------------------

The client tools require a RaSCSI/PiSCSI board and release 1.0 of the
SCSI2Pi software on the Pi. Release 22.04 or newer of the RaSCSI/PiSCSI
software currently work with all tools except PI_EXEC and SETLOG.
In addition, a SCSI Driver is required, e.g. the one integrated in HDDRIVER.
The client tools C sources are available on GitHub:
https://github.com/uweseimet/atari_public.
Visit https://www.scsi2pi.net for details on SCSI2Pi and the Atari and on
the SCSI Control app for Android.

In order to use PI_RTC und PI_SHUTD with a host services device (device type
SCHS) with an arbitrary SCSI ID and a LUN < 0 has to be created.
With HDDRIVER 12 and TT/Falcon SCSI LUNs 0-31 are supported.
Creating the host services can be done with the web interface, the
SCSI Control app or on the command line, e.g. with

>s2p -id 6 services

PI_PRINT requires a SCSI printer (device type SCLP) to be created. This can
also be done with the web interface, the SCSI Control app or on the command
line, e.g.

>s2p -id 5 printer

With the internal host adapter of the MegaSTE only a single SCSI ID is
possible, but up to 8 devices can added by using LUNs 0-7, e.g.

>s2p -ID 0 harddisk.hds -ID 0:6 printer -ID 0:7 services

All client tools find the respective device automatically. If there are
several devices the first device found is used. Like for any other device,
the SCSI IDs/LUNs used have to be configured in HDDRUTIL with "Devices and
Partitions".


PI_RTC.PRG
----------

This tool retrieves the current date and time from the Pi and sets it on the
Atari. Daylight savings time settings are automatically applied. Usually
PI_RTC is located in the AUTO folder.


PI_SHUTD.PRG
------------

This tool shuts down SCSI2Pi or the Pi. Note that PI_SHUTD terminates
immediately, but the Pi takes some time to shut down. PI_SHUTD cannot find
out when the Pi has completely shut down. After launching PI_SHUTD it is not
possible anymore to access the emulated devices.
If "scsi2pi" (or "piscsi" when using PiSCSI instead of SCSI2Pi) is passed as
a parameter only SCSI2Pi is shut down, but not the Pi. With "reboot" the Pi
is restarted.


PI_PRINT.TTP
------------

With this tool files can be printed via the Pi. Usually you create an icon
for PI_PRINT on the desktop, onto which you drop the file to be printed. As
an alternative you can launch PI_PRINT manually and enter the filename.
PI_PRINT requires that a printing system (e.g. CUPS) is active on the Pi.
The printer configured on the Pi has to be compatible with the
printer driver used for creating the file to be printed on the Atari. With
the SCSI printer default settings all data are sent to the printer without
modifying them.
Due to technical reasons it is not possible to directly print via SCSI
without using a file.
PI_PRINT was only tested with the SCSI2Pi SCSI printer, but might also work
with other SCSI printers compatible with the SCSI-2 specification.


PI_EXEC.TTP
-----------

With PI_EXEC you can send commands to the s2p process on the Pi via SCSI.
This way you can control SCSI2Pi with the Atari. All operations defined by
the s2p remote interface are available. This interface is based on Google's
Protobuf protocol and is decribed in the file s2p_interface.proto, which is
part of the SCSI2Pi sources.
The protobuf messages can be sent and received in JSON, in the protobuf
text format or as protobuf binary messages. For the Atari JSON is probably
the best format.
LOG_LEVEL.TOS provides on example on how to parse JSON data with the Atari.


LOGLEVEL.TOS
------------

This small tool demonstrates how to control SCSI2Pi remotely with SCSI
commands sent by the Atari. The available s2p log levels are queried, and
you can set a new log level.


  Uwe.Seimet@seimet.de
 