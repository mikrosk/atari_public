HDDRIVER Modules
----------------

Future versions of HDDRIVER will support starting programs, so-called
HDDRIVER modules, early during the boot sequence before the actual driver
HDDRIVER.SYS. The main difference of modules and AUTO folder programs is
that a module is launched *before* HDDRIVER.SYS, an AUTO folder program	is
launched *after* HDDRIVER.SYS. A typical module provides functionality
HDDRIVER can make use of during the boot sequence, e.g. a SCSI Driver,
which provides access to a non-standard bus. For some programs it can be
useful that they can be launched both ways, as a module and from the AUTO
folder.
During the boot sequence HDDRIVER.SYS scans all available buses for devices,
so that any mass storage device supported by a SCSI Driver can fully be
managed by HDDRIVER, as if support for this device was built-in. HDDRIVER
features like XHDI support or booting the AUTO folder and accessories from
any partition are automatically available for any drive managed by HDDRIVER.
Modules run in the same type of RAM (ST-RAM or TT-RAM) HDDRIVER.SYS is
running in, depending on the HDDRIVER installation settings of HDDRUTIL.


Naming Conventions
------------------

The filename of a module must follow the naming convention "HDDRMODn.SYS"
with n being a digit from 0-9. n determines the execution order. During the
boot process (if HDDRIVER was configured accordingly) modules are executed
until no further module file for an increasing n is found. Only then
HDDRIVER.SYS is executed. Just like HDDRIVER.SYS modules are located in the
root directory of the boot drive.


C Bindings
----------

Depending on its functionality it may be useful to be able to launch the
same binary either from the AUTO folder or as an HDDRIVER module.
MODSTART.S is a piece of Pure C initialization code that enables a
program to be executed by TOS and also as a module. Please see the comments
in the source code for details. In particular MODSTART tweaks the memory
management of a program, so that it can properly be executed during the
boot process.
It is sufficient to just add MODSTART as the first item (e.g. before
PCSTART) to the Pure C project file you are building your program with.
The MODSTART startup code automatically detects whether the binary was
started by TOS or as an HDDRIVER module.
In case a program needs to know at runtime whether it was started as a
module isHddriverModule() declared in HDDRMOD.H can be called.


Sample Module
-------------

SAMPLE.C implements a simple HDDRIVER module, which is aware of whether
it was started as a regular program or as a module.


Module Restrictions
-------------------

- Modules do not have access to mass storage devices because HDDRIVER has
  not been initialized yet at the time of module execution.
- Modules implemented in C (using MODSTART) must terminate with Pterm0(),
  Pterm() or Ptermres(). Their main() method must not be terminated just
  by a C return statement. Modules cannot return any result.
- Modules implemented in assembler (not using MODSTART) have to free any
  unused memory and must terminate with RTS. They must not execute any
  Pterm*() call.
- MODSTART.S and SAMPLE.C should be studied in order to learn more about
  HDDRIVER modules.

Modules are not meant to be replacements for programs that can simply be
run from within the AUTO folder. They should only be used when it is
required to execute code as early as possible during the boot process.


  Uwe.Seimet@seimet.de, 2019-11-07